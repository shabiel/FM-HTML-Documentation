<!DOCTYPE HTML PUBLIC "-//SQ//DTD HTML 2.0 HoTMetaL + extensions//EN" "hmpro6.dtd">
<HTML> 
  <HEAD>
<!--VHA OI Health Systems Design & Development (HSD&D)-->
<!--Oakland OIFO-->
<!--Authored by Thom Blom and Kyle Clarke, 12/31/99-->
<!--Revised by Thom Blom, 06/30/03-->
<!--Edited March 2007, Hardhats.org-->
	 <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"> 
	 <TITLE>VA FileMan Programmer Manual: ^DIC</TITLE>
	 <META NAME="subject" CONTENT="VA FileMan V. 22.0 Programmer HTML Manual">
	 <META NAME="keywords"
	  CONTENT="Information Infrastructure Service,IIS,Infrastructure and Security Services,Infrastructure Security Services,ISS,VISTA,FileMan,VA FileMan,programmer,developer,programmer manual,classic fileman api,api,classic,calls,^dic,dic">
	 <LINK REL="StyleSheet" TYPE="text/css" HREF="programmer.css"> 
  </HEAD> 
  <BODY TOPMARGIN="0"> 
  	<BR><IMG SRC="common/fileman_pm_heading.gif" BORDER="0" WIDTH="429" HEIGHT="29"
	ALT="VA FileMan V. 22.0 Programmer Manual Banner">
	<BR>
	<HR ALIGN="left" WIDTH="429" COLOR="blue">
	<BR>
	<P>&nbsp;</P>
<TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="3"
	  CLASS="tdstyle" SUMMARY="This table is for formatting purposes only" HEIGHT="1"
	  VALIGN="TOP"> 
		<TR> 
		  <TD VALIGN="BOTTOM" ALIGN="LEFT" HEIGHT="1" WIDTH="10%"
			CLASS="menubartext">Contents:</TD> 
		  <TD VALIGN="BOTTOM" ALIGN="LEFT" HEIGHT="1" WIDTH="7%">
			 <A HREF="index.htm" TARGET="_top"
			  TITLE="VA FileMan V. 22.0 Programmer HTML Manual: Main Table of Contents"
			  CLASS="menubarlink">Main</A> </TD> 
		  <TD VALIGN="BOTTOM" ALIGN="LEFT" HEIGHT="1" WIDTH="17%"><A
			 HREF="cla_frm.htm" TARGET="_top" CLASS="menubarlink"
			 TITLE="VA FileMan V. 22.0 Programmer HTML Manual: Classic VA FileMan API Chapter TOC">Chapter</A></TD>
		  
		  <TD ALIGN="LEFT" VALIGN="BOTTOM" HEIGHT="1" WIDTH="10%"
			CLASS="menubartext">See Also: </TD> 
		  <TD ALIGN="LEFT" VALIGN="BOTTOM" HEIGHT="1" WIDTH="28%"><A
			 HREF="../u1/index.htm" TARGET="_top"
			 TITLE="VA FileMan V. 22.0 Getting Started HTML Manual"
			 CLASS="menubarlink">Getting Started Manual</A></TD> 
		  <TD VALIGN="BOTTOM" ALIGN="LEFT" HEIGHT="1" COLSPAN="4" WIDTH="28%">
			 <A HREF="../u2/index.htm" TARGET="_top"
			  TITLE="VA FileMan V. 22.0 Advanced User HTML Manual"
			  CLASS="menubarlink">Advanced User Manual</A></TD> 
		</TR> 
	 </TABLE><!-- Content -->
	 <H3><A NAME="navskip">Classic VA FileMan API</A></H3> <HR CLASS="hrstyle"> 
	 <H4>^DIC: Lookup/Add</H4> 
	 <P>Given a lookup value, this entry point searches the requested Index(es)
		on a file and either finds a matching entry, adds an entry to the file, or
		returns a condition indicating that the lookup was unsuccessful.</P> 
	 <P>See also
		<A HREF="cl_dicix.htm" TARGET="display" TITLE="IX^DIC"
		 CLASS="bodylink">IX^DIC</A> and
		<A HREF="cl_dic1b.htm" TARGET="display" TITLE="MIX^DIC1"
		 CLASS="bodylink">MIX^DIC1</A> for a comparison of how they each perform
		lookups.</P> 
	 <P>Except for the DIC("W") variable, which is killed, the DIC input array
		is left unchanged by ^DIC. </P> 
	 <H5>Input Variables</H5> 
	 <TABLE BORDER="1" SUMMARY="This table is for formatting purposes only"
	  WIDTH="100%"> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Required) The file number or an explicit global root in the form
				^GLOBAL( or ^GLOBAL(X,Y,. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" ROWSPAN="21" WIDTH="20%"><B><A
			 NAME="DIC(0)">DIC(0)</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) A string of alphabetic characters which alter how DIC
				responds. At a minimum this string must be set to null. A detailed description
				of these characters can be found later in this section, under
				<A HREF="#InptVarInDetail" TITLE="DIC(0) Input Variables in Detail"
				 CLASS="bodylink">DIC(0) Input Variables in Detail</A>.</P> 
			 <P><B>NOTE:</B> If DIC(0) is null or undefined, no terminal output
				will be generated by the DIC routine. </P> 
			 <P>The acceptable characters are: </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" ALIGN="LEFT" WIDTH="10%"><B>Flag (with link to full
			 description)</B></TD> 
		  <TD ALIGN="LEFT" VALIGN="TOP"><B>Short Description</B></TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#A" TITLE="A Flag"
			 CLASS="bodylink">A</A></B></TD> 
		  <TD VALIGN="TOP"><B>A</B>sk the entry; if erroneous, ask again. </TD> 
		</TR> 
		<TR> 
		  <TD ALIGN="LEFT" VALIGN="TOP"><B><A HREF="#B" TITLE="B Flag"
			 CLASS="bodylink">B</A></B></TD> 
		  <TD>Only the <B>B</B> index is used when doing lookup to files
			 pointed-to by starting file. &nbsp;<IMG SRC="new.gif"
			 ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"></TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#C" TITLE="C Flag"
			 CLASS="bodylink">C</A></B></TD> 
		  <TD VALIGN="TOP"><B>C</B>ross-reference suppression is turned off.
			 </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#E" TITLE="E Flag"
			 CLASS="bodylink">E</A></B></TD> 
		  <TD VALIGN="TOP"><B>E</B>cho information.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#F" TITLE="F Flag"
			 CLASS="bodylink">F</A></B></TD> 
		  <TD VALIGN="TOP"><B>F</B>orget the lookup value.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#I" TITLE="I Flag"
			 CLASS="bodylink">I</A></B></TD> 
		  <TD VALIGN="TOP"><B>I</B>gnore the special lookup program.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#K" TITLE="K Flag"
			 CLASS="bodylink">K</A></B></TD> 
		  <TD VALIGN="TOP">Primary <B>K</B>ey is used as starting index for the
			 lookup. &nbsp;<IMG SRC="new.gif" ALT="New/Updated with VA FileMan V. 22.0"
			 WIDTH="35" HEIGHT="11"></TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#L" TITLE="L Flag"
			 CLASS="bodylink">L</A></B></TD> 
		  <TD VALIGN="TOP"><B>L</B>earning a new entry is allowed.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#M" TITLE="M Flag"
			 CLASS="bodylink">M</A></B></TD> 
		  <TD VALIGN="TOP"><B>M</B>ultiple-index lookup allowed.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#N" TITLE="N Flag"
			 CLASS="bodylink">N</A></B></TD> 
		  <TD VALIGN="TOP">Uppercase "<B>N</B>" -- Internal <B>N</B>umber lookup
			 allowed (but not forced). </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#lowercase_n" TITLE="n Flag"
			 CLASS="bodylink">n</A></B></TD> 
		  <TD VALIGN="TOP">Lowercase "<B>n</B>" -- Partial matching on pure
			 <B>n</B>umeric entries. &nbsp;<IMG SRC="new.gif"
			 ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"></TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#O" TITLE="O Flag"
			 CLASS="bodylink">O</A></B></TD> 
		  <TD VALIGN="TOP"><B>O</B>nly find one entry if it matches exactly.
			 </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#Q" TITLE="Q Flag"
			 CLASS="bodylink">Q</A></B></TD> 
		  <TD VALIGN="TOP"><B>Q</B>uestion erroneous input (with two <B>??</B>).
			 </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#S" TITLE="S Flag"
			 CLASS="bodylink">S</A></B></TD> 
		  <TD VALIGN="TOP"><B>S</B>uppresses display of .01 (except B
			 cross-reference match) and of any Primary Key &nbsp;<IMG SRC="new.gif"
			 ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> fields. </TD>
		  
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#T" TITLE="T Flag"
			 CLASS="bodylink">T</A></B></TD> 
		  <TD VALIGN="TOP">Con<B>T</B>inue searching all indexes until user
			 selects an entry or enters ^^ to get out.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#U" TITLE="U Flag"
			 CLASS="bodylink">U</A></B></TD> 
		  <TD VALIGN="TOP"><B>U</B>ntransformed lookup.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#V" TITLE="V Flag"
			 CLASS="bodylink">V</A></B></TD> 
		  <TD VALIGN="TOP"><B>V</B>erify that looked-up entry is OK. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#X" TITLE="X Flag"
			 CLASS="bodylink">X</A></B></TD> 
		  <TD VALIGN="TOP">E<B>X</B>act match required.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A HREF="#Z" TITLE="Z Flag"
			 CLASS="bodylink">Z</A></B></TD> 
		  <TD VALIGN="TOP"><B>Z</B>ero node returned in Y(0) and external form in
			 Y(0,0). </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A NAME="InptVarX">X</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>If DIC(0) does not contain an
				<A HREF="#A" TITLE="A FLag" CLASS="bodylink">A</A>, then the variable X must be
				defined equal to the value you want to find in the requested Index(es). </P> 
			 <P>If a lookup index is on a pointer or variable pointer field,
				FileMan will search the "B" index on the pointed-to file for a match to the
				lookup value X (unless the developer uses the DIC("PTRIX") array to direct the
				search to a different index on the pointed-to file).</P> 
			 <P>If the lookup index is compound (i.e., has more than one data
				subscript), then X can be an array X(n) where "n" represents the position in
				the subscript. For example, if X(2) is defined, it will be used as the lookup
				value to match to the entries in the second subscript of the index. If only the
				lookup value X is passed, it will be assumed to be the lookup value for the
				first subscript in the index, X(1). </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A NAME="DIC(A)">DIC("A")</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) A prompt that is displayed prior to the reading of the
				X input. If DIC("A") is not defined, the word Select, the name of the file,
				[i.e., $P(^GLOBAL(0),"^",1)], a space, the LABEL of the .01 field, and a colon
				will be displayed. If the file name is the same as the LABEL of the .01 field,
				then only the file name will be displayed. DIC(0) must contain an
				<A HREF="#A" TITLE="A Flag" CLASS="bodylink">A</A> for this prompt to be
				issued. For example, if the EMPLOYEE file had a .01 field with the LABEL of
				NAME, then FileMan would issue the following prompt: </P> 
			 <PRE>    Select EMPLOYEE NAME:  
</PRE> 
			 <P>By setting DIC("A")="Enter Employee to edit: ", the prompt would
				be:</P> 
			 <PRE>    Enter Employee to edit: 
</PRE> 
			 <P>Notice that it is necessary for the prompt in DIC("A") to include
				the colon and space at the end of the prompt if you want those to be displayed.
				</P> 
			 <P>If the lookup index is compound (i.e., has more than one data
				subscript), then DIC("A") can be an array DIC("A",n) where "<B>n</B>"
				represents the position in the subscript. For example, DIC("A",2) will be used
				as the prompt for the second subscript in the index. If only the single prompt
				DIC("A") is passed, it will be assumed to be the prompt for the first subscript
				in the index DIC("A",1). &nbsp;<IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"></P> 
			 <P>If DIC("A",n) is undefined for the "<B>n<SUP>th</SUP></B>"
				subscript, then the "Lookup Prompt" field for that subscript from the INDEX
				file will be used as the prompt, or if it is null, the LABEL of the field from
				the data dictionary. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A NAME="DIC(B)">DIC("B")</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) The default answer which is presented to the user when
				the lookup prompt is issued. If a terminal user simply presses the Enter/Return
				key, the DIC("B") default value will be used, and returned in X. DIC("B") will
				only be used if it is non-null. </P> 
			 <P>If the lookup index is compound (i.e., has more than one data
				subscript), then DIC("B") can be an array DIC("B",n) where "n" represents the
				position in the subscript. For example, DIC("B",2) will be used as the default
				answer for the prompt for the second subscript in the index. If only the single
				default answer DIC("B") is passed, it will be assumed to be the default answer
				for the prompt for the first subscript in the index DIC("B",1). &nbsp;<IMG
				SRC="new.gif" ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35"
				HEIGHT="11"></P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC("DR")</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>When calling DIC with LAYGO allowed, you can specify that a
				certain set of fields will be asked for in the case where the user enters a new
				entry. This list is specified by setting the variable DIC("DR") equal to a
				string that looks exactly like the DR-string of fields that is specified when
				calling
				<A HREF="cl_die.htm" TITLE="^DIE"
				 CLASS="bodylink">^DIE</A>. Such a list of what VA FileMan calls forced
				<A HREF="../u2/ut_id.htm" TARGET="_top" TITLE="identifiers"
				 CLASS="bodylink">identifiers</A> overrides any identifiers that would normally
				be requested for new entries in this file.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC("P")</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P><B>NOTE:</B> As of Version 22 of VA FileMan, the developer is no
				longer required to set DIC("P"). The only exception to this is for a few files
				that are not structured like a normal VA FileMan file, where the first
				subscript of the data is variable in order to allow several different "globals"
				to use the same DD. An example of this is the VA FileMan Audit files where the
				first subscript is the file number of the file being audited.</P> 
			 <P>This variable is needed to successfully add the FIRST subentry to
				a multiple when the descriptor (or header) node of the multiple does not exist.
				In that situation, DIC("P") should be set equal to the subfile number and
				subfile specifier codes for the multiple. (See the "<A HREF="gfs_2b.htm"
				TITLE="File Header" CLASS="bodylink">File Header</A>" section of the Global
				File Structure chapter.) If the descriptor node for the multiple already
				exists, DIC("P") has no effect. </P> 
			 <P>In order to automatically include any changes in the field's
				definition in DIC("P"), it is best to set this variable to the second ^-piece
				of the 0-node of the multiple field's definition in the DD. (See the "<A
				HREF="gfs_3b.htm" TITLE="Field Definition" CLASS="bodylink">Field
				Definition</A>" section of the Global File Structure chapter in this manual.)
				</P> 
			 <P>Thus, for example, if file 16150 had a multiple field #9, set
				DIC("P") like this: </P> 
			 <PRE>    S DIC(&quot;P&quot;)=$P(^DD(16150,9,0),&quot;^&quot;,2)
</PRE> 
			 <P>For more information, see "<A HREF="#Subentries"
				TITLE="Adding New Subentries to a Multiple" CLASS="bodylink">Adding New
				Subentries to a Multiple</A>" below.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A
			 NAME="DIC(PTRIX)">DIC("PTRIX",f,p,t)=d</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P><B>DIC("PTRIX",f,p,t)=d</B> where </P> 
			 <P><B>f</B> is the from (pointing) file number, </P> 
			 <P><B>p</B> is the pointer field number, </P> 
			 <P><B>t</B> is the pointed-to file number, and </P> 
			 <P><B>d</B> is an "^" delimited list of index names.</P> 
			 <P>When doing a lookup using an index for a pointer or variable
				pointer field, this new array allows the user to pass a list of indexes that
				will be used when searching the pointed-to file for matches to the lookup
				value. </P> 
			 <P>For example, if your file (662001) has a pointer field (5) to file
				200 (NEW PERSON), and you wanted the lookup on file 200 to be either by name
				("B" index), or by the first letter of the last name concatenated with the last
				4 digits of the social security number ("BS5" index): . </P> 
			 <PRE>    DIC(&quot;PTRIX&quot;,662001,5,200)=&quot;B^BS5&quot;</PRE> 
			 <P>Note that if the call allows records to be added to a pointed-to
				file, then the list in the "PTRIX" entry should contain the "B" index. However,
				the "B" index would not need to be included in the list if the first index in
				the "PTRIX" array entry is a compound index whose first subscript is the .01
				field.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A NAME="DIC(S)">DIC("S")</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) DIC("S") is a string of M code that DIC executes to
				screen an entry from selection. DIC("S") must contain an IF statement to set
				the value of $T. Those entries that the IF sets as $T=0 will not be displayed
				or selectable. When the DIC("S") code is executed, the local variable Y is the
				internal number of the entry being screened and the M naked indicator is at the
				global level @(DIC_"Y,0)"). Therefore, to use the previous example again, if
				you wanted to find a male employee whose name begins with SMITH, you would:
				</P> 
			 <PRE>    S DIC=&quot;^EMP(&quot;,DIC(0)=&quot;QEZ&quot;,X=&quot;SMITH&quot;
    S DIC(&quot;S&quot;)=&quot;I $P(^(0),U,2)=&quot;&quot;M&quot;&quot;&quot;
    D ^DIC
</PRE> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A NAME="DIC(T)">DIC("T")</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) Present every match to the lookup value, quitting only
				when user either selects one of the presented entries, enters ^^ to quit, or
				there are no more matching entries found. </P> 
			 <P>Currently, if one or more matches are found in the first pass
				through the indexes, then FileMan quits the search, whether or not one of the
				entries is selected. Only if no matches are found in the first pass does
				FileMan continue on to try transforms to the lookup value. This includes
				transforms to find internal values of pointers, variable pointers, dates or
				sets. </P> 
			 <P>Another feature of the "T" flag is that indexes are truly searched
				in the order requested. If, for example, an index on a pointer field comes
				before an index on a free-text field, matches from the pointer field will be
				presented to the user before matches to the free-text field. </P> 
			 <P>When used in combination with the "O" flag, all indexes will be
				searched for an exact match. Then, only if none are found, will FileMan make a
				second pass through the indexes looking for partial matches.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" ROWSPAN="9" WIDTH="20%"><B><A
			 NAME="DIC(V)">DIC("V")</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>If the .01 field is a
				<A HREF="../u2/cr_ex.htm#Variable" TARGET="_top"
				 TITLE="variable pointer" CLASS="bodylink">variable pointer</A>, it can point to
				entries in more than one file. You can restrict the user's ability to input
				entries from certain files by using the DIC("V") variable. It is used to screen
				files from the user. Set the DIC("V") variable to a line of M code that returns
				a truth value when executed. The code is executed after someone enters data
				into a variable pointer field. If the code tests false, the user's input is
				rejected; FileMan responds with <B>??</B> and a "beep."</P> 
			 <P>If the lookup index is compound (i.e., has more than one data
				subscript), and if any of the subscripts index variable pointer fields, then
				DIC("V",n) can be passed where "n" represents the subscript position of the
				variable pointer field in the index. For example, if DIC("V",2) is passed in,
				it will be used as the screen for files pointed-to by the variable pointer
				field indexed in the second subscript of the index. If only the entry DIC("V")
				is passed, it will be assumed to be the variable pointer file screen for the
				first subscript in the index, DIC("V",1). &nbsp;<IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"></P> 
			 <P>When the user enters a value at a variable pointer field's prompt,
				VA FileMan determines in which file that entry is found. The variable Y(0) is
				set equal to information for that file from the data dictionary definition of
				the variable pointer field. You can use Y(0) in the code set into the DIC("V")
				variable. Y(0) contains:</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B>^-Piece</B></TD> 
		  <TD VALIGN="TOP"><B>Contents</B></TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP">Piece 1</TD> 
		  <TD VALIGN="TOP">File number of the pointed-to file. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP">Piece 2</TD> 
		  <TD VALIGN="TOP">Message defined for the pointed-to file. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP">Piece 3</TD> 
		  <TD VALIGN="TOP">Order defined for the pointed-to file. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP">Piece 4</TD> 
		  <TD VALIGN="TOP">Prefix defined for the pointed-to file. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP">Piece 5</TD> 
		  <TD VALIGN="TOP">y/n indicating if a screen is set up for the
			 pointed-to file. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP">Piece 6</TD> 
		  <TD VALIGN="TOP">y/n indicating if the user can add new entries to the
			 pointed to file. </TD> 
		</TR> 
		<TR> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>All of this information was defined when that file was entered as
				one of the possibilities for the variable pointer field. </P> 
			 <P>For example, suppose your .01 field is a variable pointer pointing
				to files 1000, 2000, and 3000. If you only want the user to be able to enter
				values from files 1000 or 3000, you could set up DIC("V") like this:</P> 
			 <PRE>    S DIC(&quot;V&quot;)=&quot;I +Y(0)=1000!(+Y(0)=3000)&quot;
</PRE> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC("W")</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) An M command string which is executed when DIC displays
				each of the entries that match the user's input. The condition of the variable
				Y and of the naked indicator is the same as for DIC("S"). If DIC("W") is
				defined, it overrides the display of any
				<A HREF="../u2/ut_id.htm" TARGET="_top" TITLE="identifiers"
				 CLASS="bodylink">identifiers</A> of the file. Thus, if DIC("W")="", the display
				of identifiers will be suppressed. </P> 
			 <P><B>NOTE:</B> DIC("W") is killed by ^DIC calls.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A
			 NAME="DIC(?N)">DIC("?N",file#)=n</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P><IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> (Optional)
				The number "<B>n</B>" should be an integer set to the number of entries to be
				displayed on the screen at one time when using "<B>?</B>" help in a lookup.
				Usually, file# will be the number of the file on which you're doing the lookup.
				However, if doing a lookup using an index on a pointer field, and if DIC(0)
				contains "L", then the user also is allowed to see a list of entries from the
				pointed-to file, so in that case file# could be the number of that pointed-to
				file. For example, when doing a lookup in test file 662001, if the developer
				wants only five entries at a time to be displayed in question-mark help, set
				DIC("?N",662001)=5 </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A
			 NAME="DIC(?PARAM_file_INDEX)">DIC("?PARAM", file#,"INDEX")=Index
			 name</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P><IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> (Optional)
				Used to control entries displayed during online "<B>?</B>" help only. If
				provided, this index will be used to display the entries from the file
				specified by file#. Otherwise, VA FileMan uses the first lookup index specified
				for the ^DIC call. This value is used as the INDEX parameter to the Lister call
				to display the entries. See documentation for
				<A HREF="db_dic_l.htm" TITLE="LIST^DIC" CLASS="bodylink">LIST^DIC</A> for more
				information.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A
			 NAME="DIC(?PARAM_file_FROM)">DIC("?PARAM", file#,"FROM",n)=value</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P><IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> (Optional)
				Used to control entries displayed during online "<B>?</B>" help only. This
				array can be set to define a starting value for an entry in the lookup index
				used to list entries from the file. Integer value "<B>n</B>" is associated with
				the "<B>n</B><SUP>th</SUP>" data value subscript in the index (e.g., regular
				old-style indexes always have just one indexed data value so "n" would be 1).
				If a starting value is defined for subscript "<B>n</B>," then starting values
				must also be defined for all of the subscripts preceding "<B>n</B>." <BR> <BR>
				This information is used to set the FROM parameter for a call to
				<A HREF="db_dic_l.htm" TITLE="LIST^DIC" CLASS="bodylink">LIST^DIC</A> in order
				to display the entries in the file specified by file#. Therefore, the entries
				must meet the same rules as the FROM parameter described in that call. See
				documentation for <A HREF="db_dic_l.htm" TITLE="LIST^DIC"
				CLASS="bodylink">LIST^DIC</A> for detailed information. <BR> <BR> If
				<A HREF="#DIC(0)" TITLE="DIC(0)" CLASS="bodylink">DIC(0)</A> contains an "L"
				and the first indexed field is a pointer, then after displaying the current
				entries on the file, VA FileMan allows the user to see entries on the
				pointed-to file. In that case, the developer may request starting values for
				any pointed-to file in the pointer chain. If the user enters "^value" when
				asked whether they wish to see the entries in the file, the value entered by
				the user will override the starting list value passed by the developer in this
				array. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A
			 NAME="DIC(?PARAM_file_PART)">DIC("?PARAM", file#,"PART",n)=value</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P><IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> (Optional)
				Used to control entries displayed during online "<B>?</B>" help only. This
				array can be set to define partial match value(s) for each of the "<B>n</B>"
				subscripts on the lookup index used during online help. The information is used
				to set the PART parameter for a Lister call to display the entries. See
				documentation for <A HREF="db_dic_l.htm" TITLE="LIST^DIC"
				CLASS="bodylink">LIST^DIC</A> for more information. As with
				<A HREF='#DIC("?PARAM"From' TITLE='DIC("?PARAM",file#,"FROM",n)'
				CLASS="bodylink">DIC("?PARAM",file#,"FROM",n)</A>, if DIC(0) contains "L", the
				developer can define partial match values for any pointed-to file in the
				pointer chain.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DLAYGO</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) If this variable is set equal to the file number, then
				the users will be able to add a new entry to the file whether or not they have
				LAYGO access to the file. This variable, however, does not override any
				<A HREF="gfs_3c.htm#laygo" TITLE="LAYGO node" CLASS="bodylink">LAYGO node</A>
				that may exist on the .01 field, i.e. ^DD(file#,.01,"LAYGO",#,0). M code in the
				<A HREF="gfs_3c.htm#laygo" TITLE="LAYGO node" CLASS="bodylink">LAYGO node</A>
				will still be executed, and must set the truth value to TRUE for an entry to be
				added.</P> 
			 <P><B>NOTE:</B> In addition, DIC(0) must contain
				<A HREF="#L" TITLE="L Flag" CLASS="bodylink">L</A> to allow addition of entries
				to the file. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DINUM</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>(Optional) This input variable identifies the subscript at which
				the data is to be stored. This means DINUM must be a canonic number and that no
				data exists in the global at that subscript location, e.g.,
				$D(@(DIC_DINUM_")"))=0. </P> </TD> 
		</TR> 
	 </TABLE> 
	 <H5>Output Variables</H5> 
	 <TABLE BORDER="1" SUMMARY="This table is for formatting purposes only"
	 WIDTH="100%"> 
		<TR> 
		  <TD VALIGN="TOP" ROWSPAN="4" WIDTH="20%"><B>Y</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>DIC always returns the variable Y. The variable Y is returned with
				one of these three formats: </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B>Y=-1</B></TD> 
		  <TD VALIGN="TOP">The lookup was unsuccessful. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B><A NAME="NandS">Y=N^S</A></B></TD> 
		  <TD VALIGN="TOP">N is the internal number of the entry in the file and
			 S is the value of the .01 field for that entry. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP"><B>Y=N^S^1</B></TD> 
		  <TD VALIGN="TOP"><A HREF="#NandS" CLASS="bodylink">N and S</A> are
			 defined as above and the 1 indicates that this entry has just been added to the
			 file. </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>Y(0)</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>This variable is only set if DIC(0) contains a
				<A HREF="#Z" TITLE="Z Flag" CLASS="bodylink">Z</A>. When the variable is set,
				it is equal to the entire zero node of the entry that was selected. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>Y(0,0)</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>This variable also is only set if DIC(0) contains a
				<A HREF="#Z" TITLE="Z Flag" CLASS="bodylink">Z</A>. When the variable is set,
				it is equal to the external form of the .01 field of the entry. </P> 
			 <P>The following are examples of returned Y variables based on a call
				to the EMPLOYEE file stored in ^EMP(:</P> 
			 <PRE>    S DIC=&quot;^EMP(&quot;,DIC(0)=&quot;QEZ&quot;,X=&quot;SMITH&quot;
    D ^DIC
</PRE> 
			 <P>Returned are:</P> 
			 <PRE>    Y      = &quot;7^SMITH,SAM&quot;
    Y(0)   = &quot;SMITH,SAM^M^2231109^2
    Y(0,0) = &quot;SMITH,SAM&quot;
	</PRE> 
			 <P>If the lookup had been done on a file whose .01 field points to
				the EMPLOYEE file, the returned variables might look like this:</P> 
			 <PRE>    Y      = &quot;32^7&quot;  [ Entry #32 in this file and #7 in 
                       EMPLOYEE file.]
    Y(0)   = &quot;7^RX 2354^ON HOLD&quot;
    Y(0,0) = &quot;SMITH,SAM&quot;  [.01 field of entry 7 in 
                           EMPLOYEE file]
</PRE> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B><A NAME="OutptVarX">X</A></B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>Contains the value of the field where the match occurred. </P> 
			 <P>If the lookup index is compound (i.e., has more than one data
				subscript), and if DIC(0) contains "A" so that the user is prompted for lookup
				values, then X will be output as an array X(n) where "n" represents the
				position in the subscript and will contain the values from the index on which
				the entry was found. Thus, X(2) would contain the value of the second subscript
				in the index. If possible, the entries will be output in their external format
				(i.e., if the subscript is not computed and doesn't have a transform). If the
				entry is not found on an index (example, when lookup is done with X=" " (the
				space-bar return feature)), then X and X(1) will contain the user input, but
				the rest of the X array will be undefined. &nbsp;<IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"></P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DTOUT</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>This is only defined if DIC has timed-out waiting for input from
				the user.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DUOUT</B></TD> 
		  <TD COLSPAN="2" VALIGN="TOP"> 
			 <P>This is only defined if the user entered an up-arrow. </P> </TD> 
		</TR> 
	 </TABLE> 
	 <P></P> 
	 <H5><A NAME="InptVarInDetail">DIC(0) Input Variables in Detail</A></H5> 
	 <P>The effects of the various characters which can be contained in DIC(0)
		are described here: </P> 
	 <TABLE BORDER="1" SUMMARY="This table is for formatting purposes only"
	  WIDTH="100%"> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="A">A</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>DIC asks for input from the terminal and asks again if the input
				is erroneous. A response of null or a string containing <B>^</B> is accepted.
				Input is returned in X when DIC quits. If DIC(0) does not contain the character
				A, the input to DIC is assumed to be in the local variable X. </P> </TD> 
		</TR> 
		<TR> 
		  <TD ALIGN="LEFT" VALIGN="TOP"><B><A NAME="B">B</A></B></TD> 
		  <TD> 
			 <P><IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> Without the B
				flag, if there are cross-referenced pointer or variable pointer fields in the
				list of indexes to use for lookup and if DIC(0) contains "M" and there is no
				screening logic on the pointer that controls the lookup on the pointed-to file,
				then:</P> 
			 <OL> 
				<LI>For each cross-referenced pointer field, VA FileMan checks ALL
				  lookup indexes in each pointed-to file for a match to X (time-consuming);</LI> 
				<LI>If X matches any value in any lookup index (not just the "B"
				  index) on the pointed-to file and the IEN of the matched entry is in the home
				  file's pointer field cross-reference, VA FileMan considers this a match. This
				  may perhaps not be the lookup behavior you wanted, see Examples section.</LI> 
			 </OL> 
			 <P>The B flag prevents this behavior by looking for a match to X only
				in the B index (.01 field) of files pointed to by cross-referenced pointer or
				variable pointer fields. This makes lookups quicker and avoids the risk of VA
				FileMan matching an entry in the pointed-to file based on some unexpected
				indexed field in that file. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="C">C</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>Normally, when DIC does a lookup and finds an entry that matches
				the input, that entry is presented to the user only once even if the entry
				appears in more than one cross-reference. This is called cross-reference
				suppression and can be overridden by including a C in DIC(0). If, for example,
				a person with the name ZACHARY,DAVID is an entry in a file, then his name will
				appear in the B cross-reference of the file. If he has a nickname of ZACH which
				is in the C cross-reference of the file, then when a user enters ZACH as a
				lookup value, the name, ZACHARY,DAVID, will appear only once in the choices.
				But if there is a C in DIC(0), then ZACHARY,DAVID will appear twice in the
				choices; once as a hit in the B cross-reference and again as a hit in the C
				cross-reference. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="E">E</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>The file entry names that match the input will be echoed back to
				the terminal screen; and if there is more than one such name, the user will be
				asked to choose which entry is wanted. E is important because it is the way to
				tell DIC that you are in an interactive mode and are expecting to be able to
				receive input from the user. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="F">F</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>Prevents saving the entry number of the matched entry in the ^DISV
				global. Ordinarily, the entry number is saved at ^DISV(DUZ,DIC). This allows
				the user to do a subsequent lookup of the same entry simply by pressing the
				space bar and Enter/Return key. To avoid the time cost of setting this global,
				include an F in DIC(0). </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="I">I</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains I, any special user-written lookup program for
				a file will be ignored and DIC will proceed with its normal lookup process.</P>
			 
			 <P>You can write a special lookup program to be used to find entries
				in a particular file. This special program can be defined by using the
				<A HREF="../u2/ut_edit.htm" TARGET="_top" TITLE="Edit File"
				CLASS="bodylink">Edit File</A> option of the Utility Functions submenu (see the
				"<A HREF="afd_9.htm" TITLE="Special Lookup Programs" CLASS="bodylink">Special
				Lookup Programs</A>" section in the Advanced File Definition chapter.) When a
				lookup program is defined, VA FileMan will bypass the normal lookup process of
				DIC and branch to the user written program. This user written lookup program
				must respond to the variables documented in this section and provide the
				functionality of DIC as they pertain to the file. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="K">K</A></B></TD> 
		  <TD VALIGN="TOP"><IMG SRC="new.gif"
			 ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> This flag
			 causes ^DIC to use the Uniqueness index for the Primary Key as the starting
			 index for the lookup, rather than starting with the B index. (If developers
			 want to specify some other index as the starting index, then they can specify
			 the index by using the "D" input variable, and either the IX^DIC or the
			 MIX^DIC1 call instead of ^DIC.)</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="L">L</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains L and the user's input is in valid format for
				the file's .01 field, then DIC will allow the user to add a new entry to the
				file at this point (Learn-As-You-GO), as long as at least one of these four
				security-check conditions is true: </P> 
			 <UL> 
				<LI>The local variable DUZ(0) is equal to the @-sign.<BR><BR></LI> 
				<LI>If Kernel's File Access Security System (formerly known as
				  Kernel Part 3) is being used for security, the file is listed in the user's
				  record of accessible files with LAYGO access allowed.<BR><BR></LI> 
				<LI>If file access management is not being used, a character in
				  DUZ(0) matches a character in the file's LAYGO access code or the file has no
				  LAYGO access code.<BR><BR></LI> 
				<LI>The variable DLAYGO is defined equal to the file number.</LI> 
			 </UL> 
			 <P><B>NOTE:</B> Even if DIC(0) contains L and one of these security
				checks is passed, LAYGO will not be allowed if a test in the data dictionary's
				<A HREF="gfs_3c.htm" TITLE="LAYGO node" CLASS="bodylink">LAYGO node</A> fails.
				</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="M">M</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains M, DIC will do a multiple lookup on all of the
				file's cross-references from B on to the end of the alphabet. For example, if a
				given file is cross-referenced both by Name and by Social Security Number, and
				the user inputs 123-45-6789, DIC, failing to find this input as a Name, will
				automatically go on to look it up as a Social Security Number. </P> 
			 <P><B>NOTE:</B> For finer control in specifying the indexes used for
				lookup, see the alternate lookup entry points
				<A HREF="cl_dicix.htm" TITLE="IX^DIC" CLASS="bodylink">IX^DIC</A> and
				<A HREF="cl_dic1b.htm" TITLE="MIX^DIC1" CLASS="bodylink">MIX^DIC1</A>.</P>
			 </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="N">N</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains an uppercase N, the input is allowed to be
				checked as an internal entry number even if the file in question is not
				normally referenced by number. However, input is only checked as an IEN if no
				other matches are found during regular lookup. </P> 
			 <P>If DIC(0) does not contain an uppercase N, the user is still
				allowed to select by entry number by preceding the number with the accent grave
				character ( <B>`</B> ). When a <B>`</B> is used, the lookup is limited to
				internal entry numbers only. </P> 
			 <P>Placing an uppercase N in DIC(0) does <I>not</I> force IEN
				interpretation; it only permits it. In order to force IEN interpretation, you
				must use the accent grave (<B>`</B>) character. </P> 
			 <P><B>NOTE:</B> With this flag, when DIC(0) contains an L, users may
				be allowed to force the internal entry number when adding new entries to the
				file. If the user enters a number N that is not found on any of the
				cross-references, and if the .01 field is not numeric and the file is not
				DINUMed, and if VA FileMan can talk to the users (DIC(0)["<A HREF="#E"
				TITLE="E Flag">E</A>"), then the user will be asked whether they want to add
				the new entry, and will be prompted for the value of the .01 field. The entry
				will be added at the record number N that was originally entered by the user.
				Note that if there is a .001 field on the file, the number N must also pass the
				INPUT transform for the .001 field. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="lowercase_n">n</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P><IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> If the
				lowercase "<B>n</B>" flag is put into DIC(0), then if the lookup value is
				numeric and if a lookup is done on a free text or set of codes field, partial
				matches on pure numerics will be found. Suppose a free text field has records
				with the values 2, 223, and 22A, and the lookup value is 2. Without the flag,
				only the records with the values 2 and 22A are found. With the flag, all three
				are found.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="O">O</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains the letter O, then for each index searched,
				FileMan looks first for exact matches to the lookup value before looking for
				partial matches. If an exact match is found, then FileMan returns only that
				match and none of the partial matches on the index. Thus if an index contained
				the entries "SMITH,SAM" and "SMITH,SAMUEL" and if the user typed a lookup value
				of "SMITH,SAM", then only the "SMITH,SAM" entry would be selected, and the user
				would never see the entry "SMITH,SAMUEL". Note that if partial matches but no
				exact matches are found in the first index(es) searched, but if exact matches
				are found in an index searched later, then the partial matches from the first
				index(es) are returned along with the exact match from the later index(es).
				</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="Q">Q</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains Q and erroneous input is entered, two question
				marks (<B>??</B>) will be displayed and a "beep" will sound. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="S">S</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) does not contain S, the value of the .01 field and
				Primary Key fields (if the file has a Primary Key &nbsp;<IMG SRC="new.gif"
				ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11">) will be
				displayed for all matches found in any cross-reference. If DIC(0) does contain
				S, the .01 field and Primary Key fields will not be displayed unless they are
				one of the indexed fields on which the match was made. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="T">T</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>"T flag in DIC(0). Present every match to the lookup value,
				quitting only when user either selects one of the presented entries, enters ^^
				to quit, or there are no more matching entries found. </P> 
			 <P>Currently, if one or more matches are found in the first pass
				through the indexes, then FileMan quits the search, whether or not one of the
				entries is selected. Only if no matches are found in the first pass does
				FileMan continue on to try transforms to the lookup value. This includes
				transforms to find internal values of pointers, variable pointers, dates or
				sets. </P> 
			 <P>Another feature of the "T" flag is that indexes are truly searched
				in the order requested. If, for example, an index on a pointer field comes
				before an index on a free-text field, matches from the pointer field will be
				presented to the user before matches to the free-text field. When used in
				combination with the "O" flag, all indexes will be searched for an exact match.
				Then, only if no matches are found, will FileMan make a second pass through the
				indexes looking for partial matches.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="U">U</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>Normally the lookup value is expected to be in external format
				(for dates, pointers and such). FileMan first searches the requested index for
				a match to the user input as it was typed in. Then, if no match is found,
				FileMan automatically tries certain transforms on the lookup value. </P> 
			 <P>For instance, if one of the lookup indexes is on a date field,
				FileMan tries to transform the lookup value to an internal date, then checks
				the index again. The "U" flag causes FileMan to look for an exact match on the
				index and to skip any transforms. Thus the lookup value must be in internal
				format. This is especially useful for lookups on indexed pointer fields, where
				the internal entry number (i.e., internal pointer value) from the pointed-to
				file is already known. </P> 
			 <P>Ordinarily this flag would not be used along with the "A", "B",
				"M", "N" or "T" flags. However, in many cases it makes sense to combine this
				with the <A HREF="#X" TITLE='"X" flag' CLASS="bodylink">"X" flag</A>. </P>
			 </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="V">V</A></B></TD> 
		  <TD VALIGN="TOP"><IMG SRC="new.gif"
			 ALT="New/Updated with VA FileMan V. 22.0" WIDTH="35" HEIGHT="11"> If DIC(0)
			 contains V and only one match is made to the user's lookup value, then they
			 will be asked "OK?" and they will have to verify that the looked-up entry is
			 the one they wanted. This is an on the fly way of getting behavior similar to
			 the permanent flag that can be set on a file by answering "YES" to the question
			 "ASK 'OK' WHEN LOOKING UP AN ENTRY?" (See the
			 <A HREF="../u2/ut_edit.htm" TARGET="display" TITLE="EDIT FILE option"
			 CLASS="bodylink">EDIT FILE option</A> within the FileMan UTILITY option,
			 described in the Advanced User Manual).</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="X">X</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains X, for an exact match, the input value must be
				found exactly as it was entered. Otherwise, the routine will look for any
				entries that begin with the input X. Unless 'X-act match' is specified,
				lowercase input that fails in the lookup will automatically be converted to
				uppercase, for a second lookup attempt. The difference between X and
				<A HREF="#O" TITLE="O Flag" CLASS="bodylink">O</A> (described above) is that X
				requires an exact match. If there is not one, either DIC exits or tries to add
				a new entry. With O, if there is not an exact match, DIC looks for a partial
				match beginning with the input. </P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="100"><B><A NAME="Z">Z</A></B></TD> 
		  <TD VALIGN="TOP"> 
			 <P>If DIC(0) contains Z and if the lookup is successful, then the
				variable Y(0) will also be returned. It will be set equal to the entire zero
				node of the entry that has been found. Another array element, Y(0,0), is also
				returned and will be set equal to the printable expression of the .01 field of
				the entry selected. This has no use for Free Text and Numeric data types unless
				there is an OUTPUT transform. However, for Date/Time, Set of Codes and Pointer
				data types, Y(0,0) will contain the external format. </P> </TD> 
		</TR> 
	 </TABLE> 
	 <H5><A NAME="Subentries">Adding New Subentries to a Multiple</A></H5> 
	 <P>You can use ^DIC or
		<A HREF="cl_dicn1.htm" TITLE="FILE^DICN" CLASS="bodylink">FILE^DICN</A> to add
		new subentries to a multiple. In order to add a subentry, the following
		variables need to be defined: </P> 
	 <TABLE BORDER="1" SUMMARY="This table is for formatting purposes only"
	 WIDTH="100%"> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC</B> </TD> 
		  <TD VALIGN="TOP">Set to the full global root of the subentry. For
			 example, if the multiple is one level below the top file level:
			 file's_root,entry#,multiple_field's_node, </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC(0)</B></TD> 
		  <TD VALIGN="TOP">Must contain "<A HREF="#L" TITLE="L Flag"
			 CLASS="bodylink">L</A>" to allow LAYGO.</TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DIC("P")</B></TD> 
		  <TD VALIGN="TOP">Set to the 2nd piece of 0-node of the multiple field's
			 DD entry. 
			 <P><B>NOTE:</B> As of Version 22 of VA FileMan, the developer is no
				longer required to set DIC("P"). The only exception to this is for a few files
				that are not structured like a normal VA FileMan file, where the first
				subscript of the data is variable in order to allow several different "globals"
				to use the same DD. An example of this is the VA FileMan Audit files where the
				first subscript is the file number of the file being audited.</P> </TD> 
		</TR> 
		<TR> 
		  <TD VALIGN="TOP" WIDTH="20%"><B>DA(1)...DA(n)</B></TD> 
		  <TD VALIGN="TOP">Set up this array such that DA(1) is the IEN at the
			 next higher file level above the multiple that the lookup is being performed
			 in, DA(2) is the IEN at the next higher file level (if any), ... DA(n) is the
			 IEN at the file's top level. 
			 <P><B>NOTE:</B> The value of the unsubscripted DA node should not be
				defined when doing lookups in a subfile -- that's the value you're trying to
				obtain!</P> </TD> 
		</TR> 
	 </TABLE> 
	 <P>A.) Below is an example of code that:</P> 
	 <OL> 
		<LI> Uses ^DIC to interactively select a top-level record.<BR><BR></LI> 
		<LI>Uses ^DIC to select or create a <B>subentry</B> in a multiple in that
		  record.<BR><BR></LI> 
		<LI>Uses
		  <A HREF="cl_die.htm" TITLE="^DIE"
		  CLASS="bodylink">^DIE</A> to edit fields in the selected or created
		  subentry.</LI> 
	 </OL> 
	 <P>The file's root in this example is '^DIZ(16150,', the multiple's field
		number is 9, and the multiple is found on node 4. The code for this example
		follows: </P> 
	 <PRE>; a call is made to DIC so the user can select an entry in the file
;
S DIC=&quot;^DIZ(16150,&quot;,DIC(0)=&quot;QEAL&quot; D ^DIC
I Y=-1 K DIC Q  ;quit if look-up fails
;
; a second DIC call is set up to select the subentry
;
S DA(1)=+Y ;+Y contains the internal entry number of entry chosen
S DIC=DIC_DA(1)_&quot;,4,&quot; ;the root of the subfile for that entry
S DIC(0)=&quot;QEAL&quot; ;LAYGO to the subfile is allowed
S DIC(&quot;P&quot;)=$P(^DD(16150,9,0),&quot;^&quot;,2) ;returns the subfile# and specifiers
D ^DIC I Y=-1 K DIC,DA Q  ;user selects or adds subentry
;
; a DIE call is made to edit fields in subfile
;
S DIE=DIC K DIC ;DIE now holds the subfile's root
S DA=+Y ;+Y contains the internal entry number of subentry chosen
S DR=&quot;1;2&quot; D ^DIE ;edit fields number 1 and 2
K DIE,DR,DA,Y Q

</PRE> 
	 <P><A NAME="example_b">B.)</A> File #662002 has a .01 field that points to
		the NEW PERSON file (#200). In this example, we'll use input arrays in
		DIC("?PARAM",662002,"FROM",1) to start the list of entries in the "B" index of
		File #662002 with the letter "M". Since DIC(0) contains "L" (user can add
		entries to the pointed-to File #200), VA FileMan will also display entries from
		File #200, so we use DIC("?PARAM",200,"PART",1) to display only entries that
		start with the letter "S".</P> 
	 <PRE>&gt;<B>S DIC=^DIZ(662002,DIC(0)=&quot;AEQZL&quot;
</B>&gt;<B>S DIC(&quot;?PARAM&quot;,200,&quot;PART&quot;,1)=&quot;S&quot;
</B>&gt;<B>S DIC(&quot;?PARAM&quot;,662002,&quot;FROM&quot;,1)=&quot;M&quot;
</B> 
&gt;<B>D ^DIC
</B> 
Select ZZTAMI POINT TO NEW PERSON PERSON NAME: <B>??</B>
    
   Choose from:
   MANNERS,JULIA      NOV 11, 1961     ANOTHER GREAT PROGRAMMER     JM
 PROGRAMMER
   MARSHALL,DELBERT MAY 05, 1965     WIZARD     TOAD          PROGRAMMER
   OGDEN,MARSHALL JUL 07, 1977     GREAT PROGRAMMER     MO PROGRAMMER
   RETROMAN,USER K M JR      JAN 01, 1969     COOLDUDE     UR       
   TIMOTHY,S J      APR 03, 1948     KOOL KAT     SJT PROGRAMMER
   WERLY,BIRD      JUN 12, 1955     GROOVY GUY     BW PROGRAMMER
   WINNER,BIG      AUG 28, 1949     COMPUTER SPECIALIST     BW
 PROGRAMMER
   WINNER,SMALL      AUG 28, 1948     SECOND PLACE     SW PROGRAMMER
   ZERO,BOB      MAR 02, 1948     VERY GOOD PROGRAMMER     BZ
 IRMFO     PROGRAMMER
          
        You may enter a new ZZTAMI POINT TO NEW PERSON, if you wish
    
   Choose from:
   SHARED,MAIL            
   SMITH,JOHN HOWARD STEVEN II               
   STRALL,SEG        SAS       
   SUPERMAN,JOE X Y JR</PRE> 
	 <P>C.) In this example we are using the same files as in "<A
		HREF="#example_b" TITLE="Example B" CLASS="bodylink">Example B</A>", we will
		display entries from the pointing File #662002, using the "AC" index, which
		sorts the entries by TITLE, then by NAME. In this case, we will limit the
		number of entries displayed at one time from both File #662002 and File #200 to
		5.</P> 
	 <PRE>&gt;<B>S DIC=&quot;^DIZ(662002,&quot;,DIC(0)=&quot;AEQZL&quot;
</B>&gt;<B>S DIC(&quot;?PARAM&quot;,662002,&quot;INDEX&quot;)=&quot;AC&quot;
</B>&gt;<B>S DIC(&quot;?N&quot;,662002)=5
</B>&gt;<B>S DIC(&quot;?N&quot;,200)=5
</B> 
&gt;<B>D ^DIC
</B> 
Select ZZTAMI POINT TO NEW PERSON PERSON NAME: <B>??</B>
    
   Choose from:
   A STATE   CALIFORNIA,MR      MAR 01, 1875     A STATE     MC     ABCD  
   ANOTHER GREAT PROGRAMMER   MANNING,DARYL      NOV 11, 1961     ANOTHER GREAT
 PROGRAMMER     DM          PROGRAMMER
   BROKER WHIZ   CROSS,BOB      FEB 05, 1950     BROKER WHIZ     BC
   COMPUTER SPECIALIST   WILLY,TED     AUG 28, 1949 COMPUTER SPECIALIST TW
   COOLDUDE   RETROMAN,USER K M JR      JAN 01, 1969     COOLDUDE     UR       
   
                ^
      
     You may enter a new ZZTAMI POINT TO NEW PERSON, if you wish
     
 Answer with NEW PERSON NAME
 Do you want the entire NEW PERSON List? <B>Y &lt;RET&gt;</B>  (Yes)
Choose from:
   ATESTMAN,BOB K III        BKA    
   CALIFORNIA,MR        MC     ABCD  
   CLARK,KENT        KC       
   CROSS,BOB        BC          PROGRAMMER
   DELANCY,NAN        ND          PROGRAMMER</PRE>
	 <P>&nbsp;</P> 
	 <HR CLASS="hrstyle">
	 <!-- cl_dic.htm -->
	 <P ALIGN="CENTER">Reviewed/Updated: March 10, 2007</P>
	 <P>&nbsp;</P> 

  </BODY>
</HTML>

